---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: theodolite-kafka
  namespace: default
spec:
  kafka:
{% if deployment_type == "production" %}
    resources:
      requests:
        memory: "30Gi"
        cpu: "{{exp_params.broker_cpu}}"
      limits:
        memory: "30Gi"
        cpu: "{{exp_params.broker_cpu}}"
{% elif deployment_type == "test" %}
    resources: {}
{% endif %}
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node.kubernetes.io/broker
                      operator: In
                      values:
                        - "true"
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      strimzi.io/cluster: theodolite-kafka
                      strimzi.io/kind: Kafka
                      strimzi.io/name: theodolite-kafka-kafka
                  topologyKey: kubernetes.io/hostname

{% if deployment_type == "production" %}
    jvmOptions:
      "-Xmx": "{{ exp_params.broker_mem | replace('i', '') }}"
      "-Xms": "{{ exp_params.broker_mem | replace('i', '') }}"
{% endif %}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: theodolite-kafka-metrics
          key: kafka-metrics-config.yml
    config:
      "auto.create.topics.enable": false
      "num.partitions": "1"
      # "num.io.threads": "{{exp_params.broker_io_threads}}"
      # "num.network.threads": "{{exp_params.broker_network_threads}}"
      # "num.replica.fetchers": "{{exp_params.broker_replica_fetchers}}"
      "message.max.bytes": "15728640" # 15 MB
      "replica.fetch.max.bytes": "15728640" # 15 MB
      "default.replication.factor": "1"
      "offsets.topic.replication.factor": "1"
{% if deployment_type == "production" %}
{% elif deployment_type == "test" %}
      "default.replication.factor": "1"
      "offsets.topic.replication.factor": "1"
{% endif %}
      # "message.max.bytes": "134217728" # 128 MB
      # "replica.fetch.max.bytes": "134217728" #128 MB
      # "log.retention.ms": "7200000" # 2h
      # "metrics.sample.window.ms": "5000" #5s
      # "unclean.leader.election.enable": "true"
      # "min.insync.replicas": "1"
      # "offsets.topic.num.partitions": "300"
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
{% if deployment_type == "production" %}
    replicas: {{exp_params.broker_replicas}}
{% elif deployment_type == "test" %}
    replicas: 1
{% endif %}
    storage:
      type: persistent-claim
      size: "100Gi"
      deleteClaim: true
  kafkaExporter:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io/control-plane
                      operator: In
                      values:
                        - "true"
    storage:
      type: ephemeral
    entityOperator:
      template:
        pod:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: In
                        values:
                          - "true"
  zookeeper:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node.kubernetes.io/broker
                      operator: In
                      values:
                        - "true"
    storage:
      type: ephemeral
{% if deployment_type == "production" %}
    replicas: 3
{% elif deployment_type == "test" %}
    replicas: 1
{% endif %}
    zooEntrance:
      enabled: false
      zookeeperClient:
        nodeSelector:
          node-role.kubernetes.io/control-plane: "true"
